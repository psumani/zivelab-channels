{"version":3,"sources":["docs/pages/gettingStarted/gettingStarted.md","withRoot.js","modules/utils/net.js","modules/components/FabAddDevice.js","pages/GettingStartedPage.js","pages/ChannelPage.js","pages/index.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","theme","createMuiTheme","palette","primary","light","purple","main","dark","secondary","green","typography","useNextVariants","withRoot","Component","props","react_default","a","createElement","core_styles","CssBaseline_default","addresses","ZiveLab","getFullRange","ip","includeEndpoints","arguments","length","undefined","validateIPaddress","ipStart","substr","lastIndexOf","Array","from","el","i","ipaddress","test","alert","isZiveDevice","mac","type","leading","toLowerCase","split","slice","join","indexOf","JSON","stringify","vendor","macLookup","FabAddDevice","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","initialize","knownDevice","isValid","setState","validKnownDevice","handleOpen","open","handleClose","handleChange","event","newValue","target","value","console","log","handleClick","onClick","state","bind","assertThisInitialized","classes","_this$state","Fragment","Tooltip_default","title","aria-label","Fab_default","className","fab","color","size","Add_default","Dialog_default","onClose","aria-labelledby","DialogTitle_default","id","DialogContent_default","DialogContentText_default","FormControl_default","required","error","InputLabel_default","Input_default","autoFocus","label","onChange","fullWidth","DialogActions_default","Button_default","disabled","protoTypes","PropTypes","object","isRequired","string","func","GettingStartedPage","md","_this2","fetch","Page","then","res","text","esm","children","launched","Date","getTime","states","NotAssigned","Idle","Running","Finished","Stopped","RunningNoiseLevel","defaultParameters","initialFrequency","finalFrequency","density","iteration","currentRange","maxInitialDelay","skip","cycles","ChannelPage","about","channel","cook","parameters","activeIndex","auxData","loadAboutAsync","loadChannelAsync","loadCookAsync","loadSamplesAsync","clearInterval","timerID","setInterval","ipAddress","aboutURL","aboutFetch","json","aboutJson","_context","t0","channelURL","channelFetch","channelJson","keys","find","key","isIdle","isRunning","isRunningNoiseLevel","newAuxItem","time","voltage","auxVoltage","temperature","auxTemperature","concat","toConsumableArray","_this$state$auxData","toArray","rest","lastStarted","lastTicks","ticks","lastCount","count","started","_context2","cookURL","cookFetch","cookJson","moment","objectSpread","_context3","index","samplesURL","toString","samplesFetch","samplesJson","data","map","item","j","samples","defineProperty","_context4","main_default","src","displayDataTypes","collapsed","gettingStartedKey","Index","openDrawer","openSnackbar","snackbarMessage","selectedKey","localIP","localDevices","remoteDevices","scanDevices","isLocalScan","isRemoteScan","scanCompleted","scanTotal","toggleDrawer","handleSnackbarClose","reason","handleListItemClick","handleLocalClick","findDevices","handleRemoteClick","handleAddKnownDevice","scanKnownDevice","GettingStartedTitle","Typography_default","variant","noWrap","ChannelTitle","_ref","params","match","getAbout","model","startsWith","channelPage","_ref2","pages_ChannelPage","gettingStartedLink","react_router_dom","assign","to","componentDidMount","getLocalIPAddressAsync","isLocal","message","baseIP","_ref3","asyncToGenerator","regenerator_default","mark","_callee2","wrap","prev","next","stop","_x3","apply","Promise","resolve","reject","RTCPeerConnection","window","webkitRTCPeerConnection","mozRTCPeerConnection","rtc","iceServers","createDataChannel","reliable","onicecandidate","evt","candidate","addr","sdp","finalIP","forEach","line","parts","grepSDP","createOffer","offerDesc","setLocalDescription","e","warn","devices","aboutRequest","Request","macAddress","validDevice","name","serialNumber","filter","device","invalidDevice","LinearProgress_default","_this3","linkTo","deviceLink","listKey","Divider_default","ListItem_default","button","dense","component","selected","ListItemIcon_default","Tablet_default","ListItemText_default","_this4","_this$props","_this$state2","_this$state3","isScanning","isLocalScanning","isRemoteScanning","completed","root","AppBar_default","position","classNames","appBar","appBarShift","Toolbar_default","disableGutters","IconButton_default","menuButton","hide","Menu_default","react_router","path","exact","Drawer_default","drawer","anchor","paper","drawerPaper","drawerHeader","direction","ChevronLeft_default","ChevronRight_default","DeviceHub_default","ScanProgress","ListDevices","components_FabAddDevice","content","contentShift","Snackbar_default","anchorOrigin","vertical","horizontal","autoHideDuration","ContentProps","aria-describedby","action","close","Close_default","React","withStyles","display","transition","transitions","create","easing","sharp","duration","leavingScreen","width","marginLeft","easeOut","enteringScreen","badgeMargin","margin","spacing","unit","marginRight","flexShrink","alignItems","padding","mixins","toolbar","justifyContent","flexGrow","bottom","right","withTheme","Boolean","location","hostname","ReactDOM","render","pages","document","querySelector","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e71283cc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/gettingStarted.ce91325d.md\";","import React from 'react';\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\nimport purple from '@material-ui/core/colors/purple';\r\nimport green from '@material-ui/core/colors/green';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\n// A theme with custom primary and secondary color.\r\n// It's optional.\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      light: purple[300],\r\n      main: purple[500],\r\n      dark: purple[700],\r\n    },\r\n    secondary: {\r\n      light: green[300],\r\n      main: green[500],\r\n      dark: green[700],\r\n    },\r\n  },\r\n  typography: {\r\n    useNextVariants: true,\r\n  },\r\n});\r\n\r\nfunction withRoot(Component) {\r\n  function WithRoot(props) {\r\n    // ThemeProvider makes the theme available down the React tree\r\n    // thanks to React context.\r\n    return (\r\n      <MuiThemeProvider  theme={theme}>\r\n        {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\r\n        <CssBaseline />\r\n        <Component {...props} />\r\n      </MuiThemeProvider>\r\n    );\r\n  }\r\n\r\n  return WithRoot;\r\n}\r\n\r\nexport default withRoot;\r\n","// 0x001BC5081000 to 0x001BC5081FFF\r\nconst addresses = {\r\n  ZiveLab: [\r\n    \"00:1b:c5:08:10\",\r\n    \"00:1b:c5:08:11\",\r\n    \"00:1b:c5:08:12\",\r\n    \"00:1b:c5:08:13\",\r\n    \"00:1b:c5:08:14\",\r\n    \"00:1b:c5:08:15\",\r\n    \"00:1b:c5:08:16\",\r\n    \"00:1b:c5:08:17\",\r\n    \"00:1b:c5:08:18\",\r\n    \"00:1b:c5:08:19\",\r\n    \"00:1b:c5:08:1a\",\r\n    \"00:1b:c5:08:1b\",\r\n    \"00:1b:c5:08:1c\",\r\n    \"00:1b:c5:08:1d\",\r\n    \"00:1b:c5:08:1e\",\r\n    \"00:1b:c5:08:1f\"\r\n  ]\r\n};\r\n\r\n// https://gist.github.com/hectorguo/672844c319547498dcb569df583f959d\r\n/**\r\n * Get Local IP Address\r\n *\r\n * @returns Promise Object\r\n *\r\n * getLocalIPAddress().then((ipAddr) => {\r\n *    console.log(ipAddr); // 192.168.0.122\r\n * });\r\n */\r\nfunction getLocalIPAddress() {\r\n  return new Promise(function(resolve, reject) {\r\n    // NOTE: window.RTCPeerConnection is \"not a constructor\" in FF22/23\r\n    var RTCPeerConnection =\r\n      /*window.RTCPeerConnection ||*/ window.webkitRTCPeerConnection ||\r\n      window.mozRTCPeerConnection;\r\n\r\n    if (!RTCPeerConnection) {\r\n      reject(\"Your browser does not support this API\");\r\n    }\r\n\r\n    var rtc = new RTCPeerConnection({ iceServers: [] });\r\n\r\n    function grepSDP(sdp) {\r\n      //var hosts = [];\r\n      var finalIP = \"\";\r\n      sdp.split(\"\\r\\n\").forEach(function(line) {\r\n        // c.f. http://tools.ietf.org/html/rfc4566#page-39\r\n        if (~line.indexOf(\"a=candidate\")) {\r\n          // http://tools.ietf.org/html/rfc4566#section-5.13\r\n          const parts = line.split(\" \"); // http://tools.ietf.org/html/rfc5245#section-15.1\r\n          const addr = parts[4];\r\n          const type = parts[7];\r\n          if (type === \"host\") {\r\n            finalIP = addr;\r\n          }\r\n        } else if (~line.indexOf(\"c=\")) {\r\n          // http://tools.ietf.org/html/rfc4566#section-5.7\r\n          const parts = line.split(\" \");\r\n          const addr = parts[2];\r\n          finalIP = addr;\r\n        }\r\n      });\r\n      return finalIP;\r\n    }\r\n\r\n    if (1 || window.mozRTCPeerConnection) {\r\n      // FF [and now Chrome!] needs a channel/stream to proceed\r\n      rtc.createDataChannel(\"\", { reliable: false });\r\n    }\r\n\r\n    rtc.onicecandidate = function(evt) {\r\n      // convert the candidate to SDP so we can run it through our general parser\r\n      // see https://twitter.com/lancestout/status/525796175425720320 for details\r\n      if (evt.candidate) {\r\n        var addr = grepSDP(\"a=\" + evt.candidate.candidate);\r\n        resolve(addr);\r\n      }\r\n    };\r\n    rtc.createOffer(\r\n      function(offerDesc) {\r\n        rtc.setLocalDescription(offerDesc);\r\n      },\r\n      function(e) {\r\n        console.warn(\"offer failed\", e);\r\n      }\r\n    );\r\n  });\r\n}\r\n\r\n/**\r\n * Build array of full ip range (xxx.xxx.x.1-255) given example ip address\r\n * @param {String} ip\r\n */\r\nfunction getFullRange(ip, includeEndpoints = false) {\r\n  if (!validateIPaddress(ip)) return null;\r\n\r\n  var ipStart = ip.substr(0, ip.lastIndexOf(\".\") + 1);\r\n  return includeEndpoints\r\n    ? Array.from({ length: 255 }, (el, i) => ipStart + (i + 1))\r\n    : Array.from({ length: 253 }, (el, i) => ipStart + (i + 2));\r\n}\r\n\r\n/**\r\n * Check if the given ip address is valid\r\n * @param {String} ip\r\n */\r\nfunction validateIPaddress(ipaddress) {\r\n  if (\r\n    /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(\r\n      ipaddress\r\n    )\r\n  ) {\r\n    return true;\r\n  }\r\n  alert(\"You have entered an invalid IP address!\");\r\n  return false;\r\n}\r\n\r\n/**\r\n * Cross references provided mac address with lookup table (incomplete)\r\n * @param {string} mac\r\n * @param {string} type\r\n * @return {string}\r\n */\r\nfunction macLookup(mac, type) {\r\n  const leading = mac\r\n    .toLowerCase()\r\n    .split(\":\")\r\n    .slice(0, 5)\r\n    .join(\":\");\r\n\r\n  if (type && addresses[type]) {\r\n    if (addresses[type].indexOf(leading) > -1) return type;\r\n  }\r\n\r\n  if (JSON.stringify(addresses).indexOf(leading) === -1) return false;\r\n\r\n  for (var vendor in addresses) {\r\n    if (addresses[vendor].indexOf(leading) > -1) return vendor;\r\n  }\r\n}\r\n\r\nfunction isZiveDevice(mac) {\r\n  return macLookup(mac, \"ZiveLab\") === \"ZiveLab\";\r\n}\r\n\r\nexport {\r\n  getLocalIPAddress,\r\n  getFullRange,\r\n  validateIPaddress,\r\n  macLookup,\r\n  isZiveDevice\r\n};\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Fab from \"@material-ui/core/Fab\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\n\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\n\r\nimport { validateIPaddress } from \"../utils/net\";\r\n\r\nclass FabAddDevice extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      open: false,\r\n      knownDevice: \"192.168.0.15\",\r\n      validKnownDevice: true\r\n    };\r\n\r\n    this.initialize = this.initialize.bind(this);\r\n    this.handleOpen = this.handleOpen.bind(this);\r\n    this.handleClose = this.handleClose.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.initialize(this.props.knownDevice);\r\n  }\r\n\r\n  initialize = knownDevice => {\r\n    const isValid = validateIPaddress(knownDevice);\r\n    this.setState({\r\n      knownDevice: knownDevice,\r\n      validKnownDevice: isValid\r\n    });\r\n  };\r\n\r\n  handleOpen = () => {\r\n    this.setState({ open: true });\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.setState({ open: false });\r\n  };\r\n\r\n  handleChange = event => {\r\n    const newValue = event.target.value;\r\n    const isValid = validateIPaddress(newValue);\r\n    console.log(newValue);\r\n    this.setState({ knownDevice: newValue, validKnownDevice: isValid });\r\n  };\r\n\r\n  handleClick = () => {\r\n    this.handleClose();\r\n    this.props.onClick(this.state.knownDevice);\r\n  };\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    const { open, knownDevice, validKnownDevice } = this.state;\r\n    return (\r\n      <React.Fragment>\r\n        <Tooltip\r\n          title=\"Click to add known device\"\r\n          aria-label=\"Click to add known device\"\r\n        >\r\n          <Fab\r\n            aria-label=\"Add\"\r\n            className={classes.fab}\r\n            color=\"primary\"\r\n            size=\"medium\"\r\n            onClick={this.handleOpen}\r\n          >\r\n            <AddIcon />\r\n          </Fab>\r\n        </Tooltip>\r\n        <Dialog\r\n          open={open}\r\n          onClose={this.handleClose}\r\n          aria-labelledby=\"form-dialog-known-device\"\r\n        >\r\n          <DialogTitle id=\"form-dialog-known-device\">\r\n            Add known device\r\n          </DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText>\r\n              Please enter the known IP address of your device here.\r\n            </DialogContentText>\r\n            <br />\r\n            <FormControl required error={!validKnownDevice}>\r\n              <InputLabel>IP address</InputLabel>\r\n              <Input\r\n                autoFocus\r\n                id=\"ipAddress-to-add\"\r\n                label=\"IP address\"\r\n                value={knownDevice}\r\n                onChange={this.handleChange}\r\n                type=\"text\"\r\n                fullWidth\r\n              />\r\n            </FormControl>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button\r\n              onClick={this.handleClick}\r\n              color=\"primary\"\r\n              disabled={!validKnownDevice}\r\n            >\r\n              Add\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nFabAddDevice.protoTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  knownDevice: PropTypes.string.isRequired,\r\n  onClick: PropTypes.func\r\n};\r\n\r\nexport default FabAddDevice;\r\n","import React, { Component } from \"react\";\r\nimport Markdown from \"markdown-to-jsx\";\r\nimport Page from \"../docs/pages/gettingStarted/gettingStarted.md\";\r\n\r\nclass GettingStartedPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = { md: \"\" };\r\n  }\r\n\r\n  componentWillMount() {\r\n    fetch(Page)\r\n      .then(res => res.text())\r\n      .then(md => {\r\n        this.setState({ md });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    let { md } = this.state;\r\n    return (\r\n      <div className=\"post\">\r\n        <Markdown children={md} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GettingStartedPage;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport ReactJson from \"react-json-view\";\r\nimport moment from \"moment\";\r\n\r\n// Special characters\r\nconst voltageSign = \"V\";\r\nconst currentSign = \"A\";\r\nconst frequencySign = \"Hz\";\r\nconst ohmSign = \"\\u2126\";\r\nconst degreeSign = \"\\u00B0\";\r\nconst degreeCelsiusSign = \"\\u00B0C\";\r\n\r\n// Math Constatnts\r\nconst dateTimeOffset = 62135596800000; // ticks from 0000-01-01 to 1970-01-01\r\nconst launched = new Date().getTime();\r\nconst queue = [];\r\n\r\n// Device specfic constants\r\nconst states = {\r\n  NotAssigned: \"NotAssigned\",\r\n  Idle: \"Idle\",\r\n  Running: \"Running\",\r\n  Finished: \"Finished\",\r\n  Stopped: \"Stopped\",\r\n  RunningNoiseLevel: \"RunningNoiseLevel\"\r\n};\r\nconst voltageRanges = [\r\n  { value: 0, label: \"1000V\" },\r\n  { value: 1, label: \"100V\" }\r\n];\r\nconst currentRanges = [\r\n  { value: 0, label: \"2A\" },\r\n  { value: 1, label: \"400mA\" },\r\n  { value: 2, label: \"200mA\" },\r\n  { value: 3, label: \"40mA\" },\r\n  { value: 4, label: \"20mA\" },\r\n  { value: 5, label: \"4mA\" },\r\n  { value: 6, label: \"2mA\" },\r\n  { value: 7, label: \"400uA\" }\r\n];\r\nconst aboutLabels = {\r\n  model: \"Model\",\r\n  description: \"Description\",\r\n  frequencyRanges: \"Frequency Ranges\",\r\n  voltageRanges: \"Voltage Ranges\",\r\n  currentRanges: \"Current Ranges\",\r\n  temperatureSensor: \"Temperature Sensor\",\r\n  macAddress: \"Mac Address\",\r\n  ipAddress: \"IP Address\",\r\n  subnetMask: \"Subnet Mask\",\r\n  router: \"Router\",\r\n  port: \"Port\",\r\n  sifBoard: \"SIF Board\",\r\n  sifFirmware: \"SIF Firmware\",\r\n  sifSerialNumber: \"SIF Serial Number\",\r\n  zimBoard: \"ZIM Board\",\r\n  zimFirmware: \"ZIM Firmware\",\r\n  zimSerialNumber: \"ZIM Serial Number\"\r\n};\r\nconst colHeaders = {\r\n  pt: \"Pt\",\r\n  time: \"Time [s]\",\r\n  frequency: \"Freq [Hz]\",\r\n  zreal: \"Zreal [\" + { ohmSign } + \"]\",\r\n  zimag: \"Zimag [\" + { ohmSign } + \"]\",\r\n  zmod: \"Zmod [\" + { ohmSign } + \"]\",\r\n  zphase: \"Zphase [\" + { degreeSign } + \"]\",\r\n  idc: \"Idc [A]\",\r\n  vdc: \"vdc [V]\",\r\n  temperature: \"Temperature [\" + { degreeCelsiusSign } + \"]\",\r\n  currentRange: \"IRange [A]\"\r\n};\r\nconst defaultParameters = {\r\n  initialFrequency: 1000,\r\n  finalFrequency: 1.0,\r\n  density: 10,\r\n  iteration: 1,\r\n  currentRange: 2,\r\n  maxInitialDelay: 12.0,\r\n  skip: 1,\r\n  cycles: 0\r\n};\r\nconst parameterLabels = {\r\n  initialFrequency: {\r\n    label: \"Initial Frequency\",\r\n    min: 0.1,\r\n    max: 4000,\r\n    default: 1000\r\n  },\r\n  finalFrequency: { label: \"Final Frequency\", min: 0.1, max: 4000, default: 1 },\r\n  density: { label: \"Density\", min: 1, max: 20, default: 10 },\r\n  iteration: { label: \"Iteration\", min: 1, max: 100, default: 1 },\r\n  currentRange: { label: \"Current Range\", min: 0, max: 7, default: 2 },\r\n  maxInitialDelay: {\r\n    label: \"Max Initial Delay\",\r\n    min: 0,\r\n    max: 100,\r\n    default: 12\r\n  },\r\n  skip: { label: \"skip\", min: 1, max: 100, default: 1 },\r\n  cycles: { label: \"cycles\", min: 0, max: 100, default: 0 }\r\n};\r\n\r\nclass ChannelPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      about: null,\r\n      channel: null,\r\n      cook: null,\r\n\r\n      parameters: defaultParameters,\r\n      activeIndex: -1,\r\n\r\n      auxData: []\r\n    };\r\n\r\n    this.loadAboutAsync = this.loadAboutAsync.bind(this);\r\n    this.loadChannelAsync = this.loadChannelAsync.bind(this);\r\n    this.loadCookAsync = this.loadCookAsync.bind(this);\r\n    this.loadSamplesAsync = this.loadSamplesAsync.bind(this);\r\n  }\r\n\r\n  componentWillMount() {\r\n    clearInterval(this.timerID);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.loadAboutAsync();\r\n    this.loadChannelAsync();\r\n    this.timerID = setInterval(() => this.loadChannelAsync, 1000);\r\n  }\r\n\r\n  async loadAboutAsync() {\r\n    const { ipAddress } = this.props;\r\n    try {\r\n      const aboutURL = \"http://\" + ipAddress + \"/about\";\r\n      const aboutFetch = await fetch(aboutURL);\r\n      const aboutJson = await aboutFetch.json();\r\n      if (aboutJson) {\r\n        this.setState({\r\n          about: aboutJson\r\n        });\r\n      }\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  async loadChannelAsync() {\r\n    const { ipAddress } = this.props;\r\n    console.log(\"loadChannelAsync\");\r\n    try {\r\n      const channelURL = \"http://\" + ipAddress + \"/channel\";\r\n      const channelFetch = await fetch(channelURL);\r\n      const channelJson = await channelFetch.json();\r\n      if (channelJson) {\r\n        const state = Object.keys(states).find(\r\n          key => states[key] === channelJson.state\r\n        );\r\n        channelJson.isIdle = state === states.Idle;\r\n        channelJson.isRunning =\r\n          state === states.Running ||\r\n          state === states.Finished ||\r\n          state === states.Stopped;\r\n        channelJson.isRunningNoiseLevel = state === states.RunningNoiseLevel;\r\n\r\n        /*\r\n        if (state === states.Running && this.state.channel.isIdle) {\r\n          this.handleSnackBar(\"Started\");\r\n        } else if (state === states.Finished) {\r\n          this.handleSnackBar(\"Successfully finished\");\r\n        } else if (state === states.Stopped) {\r\n          this.handleSnackBar(\"Manually stopped\");\r\n        }\r\n        */\r\n\r\n        // Update state: channel and auxData\r\n        const newAuxItem = {\r\n          time: new Date().getTime() - launched,\r\n          voltage: channelJson.auxVoltage,\r\n          temperature: channelJson.auxTemperature\r\n        };\r\n        if (this.state.auxData.length < 200) {\r\n          this.setState({\r\n            channel: channelJson,\r\n            auxData: [...this.state.auxData, newAuxItem]\r\n          });\r\n        } else {\r\n          const [first, ...rest] = this.state.auxData;\r\n          this.setState({\r\n            channel: channelJson,\r\n            auxData: [...rest, newAuxItem]\r\n          });\r\n        }\r\n        // If lastStarted does not equals to cook.started, update cook.\r\n        if (channelJson.lastStarted) {\r\n          const lastTicks = channelJson.lastStarted.ticks;\r\n          const lastCount = channelJson.lastStarted.count;\r\n          if (\r\n            !this.state.cook ||\r\n            this.state.cook.started.ticks !== lastTicks ||\r\n            this.state.cook.started.count !== lastCount\r\n          ) {\r\n            this.loadCookAsync();\r\n          }\r\n        }\r\n      }\r\n    } catch (e) {\r\n      console.log(e);\r\n    } finally {\r\n      //clearInterval(this.timerID );\r\n    }\r\n  }\r\n\r\n  async loadCookAsync() {\r\n    const { ipAddress } = this.props;\r\n    try {\r\n      const cookURL = \"http://\" + ipAddress + \"/cook\";\r\n      const cookFetch = await fetch(cookURL);\r\n      const cookJson = await cookFetch.json();\r\n      if (cookJson) {\r\n        cookJson.started.moment = moment(\r\n          cookJson.started.ticks - dateTimeOffset\r\n        );\r\n        this.setState({\r\n          cook: cookJson,\r\n          parameters: { ...cookJson.parameters }\r\n        });\r\n      }\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  async loadSamplesAsync(index) {\r\n    try {\r\n      const samplesURL =\r\n        \"http://\" + this.props.ipAddress + \"/sample?\" + index.toString();\r\n      const samplesFetch = await fetch(samplesURL);\r\n      const samplesJson = await samplesFetch.json();\r\n      if (\r\n        samplesJson &&\r\n        this.state.cook &&\r\n        this.state.cook.data &&\r\n        index >= 0 &&\r\n        index < this.state.cook.data.length\r\n      ) {\r\n        // Update state: cook[index].samples\r\n        const data = this.state.cook.data.map((item, j) => {\r\n          if (j === index) {\r\n            return (item.samples = samplesJson);\r\n          } else {\r\n            return item;\r\n          }\r\n        });\r\n        this.setState({\r\n          cook: {\r\n            ...this.state.cook,\r\n            [data]: data\r\n          }\r\n        });\r\n      }\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { about, channel, cook } = this.state;\r\n    return (\r\n      <React.Fragment>\r\n        <h2>About</h2>\r\n        {about ? (\r\n          <ReactJson src={about} displayDataTypes={false} collapsed={true} />\r\n        ) : (\r\n          <div />\r\n        )}\r\n        <h2>Channel</h2>\r\n        {channel ? (\r\n          <ReactJson src={channel} displayDataTypes={false} collapsed={true} />\r\n        ) : (\r\n          <div />\r\n        )}\r\n        <h2>Cook</h2>\r\n        {cook ? (\r\n          <ReactJson src={cook} displayDataTypes={false} collapsed={true} />\r\n        ) : (\r\n          <div />\r\n        )}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nChannelPage.protoTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  ipAddress: PropTypes.string.isRequired\r\n};\r\n\r\nexport default ChannelPage;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport classNames from \"classnames\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport withRoot from \"../withRoot\";\r\nimport { HashRouter as Router, Route, Link, Switch } from \"react-router-dom\";\r\n\r\n// controls\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\n// Pages\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport DeviceHubIcon from \"@material-ui/icons/DeviceHub\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport TabletIcon from \"@material-ui/icons/Tablet\";\r\n\r\n// functions\r\nimport {\r\n  getLocalIPAddress,\r\n  getFullRange,\r\n  isZiveDevice\r\n} from \"../modules/utils/net\";\r\n\r\n// Components\r\nimport FabAddDevice from \"../modules/components/FabAddDevice\";\r\n\r\n// Pages\r\nimport GettingStartedPage from \"./GettingStartedPage\";\r\nimport ChannelPage from \"./ChannelPage\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    display: \"flex\"\r\n  },\r\n  appBar: {\r\n    transition: theme.transitions.create([\"margin\", \"width\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen\r\n    })\r\n  },\r\n  appBarShift: {\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    marginLeft: drawerWidth,\r\n    transition: theme.transitions.create([\"margin\", \"width\"], {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen\r\n    })\r\n  },\r\n  badgeMargin: {\r\n    margin: theme.spacing.unit * 2\r\n  },\r\n  menuButton: {\r\n    marginLeft: 12,\r\n    marginRight: 20\r\n  },\r\n  hide: {\r\n    display: \"none\"\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth\r\n  },\r\n  drawerHeader: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    padding: \"0 8px\",\r\n    ...theme.mixins.toolbar,\r\n    justifyContent: \"flex-end\"\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing.unit * 3,\r\n    transition: theme.transitions.create(\"margin\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen\r\n    }),\r\n    marginLeft: -drawerWidth\r\n  },\r\n  contentShift: {\r\n    transition: theme.transitions.create(\"margin\", {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen\r\n    }),\r\n    marginLeft: 0\r\n  },\r\n  fab: {\r\n    position: \"absolute\",\r\n    bottom: theme.spacing.unit * 2,\r\n    right: theme.spacing.unit * 2\r\n  }\r\n});\r\n\r\nconst gettingStartedKey = \"getting-started-nav\";\r\n\r\nclass Index extends React.Component {\r\n  state = {\r\n    openDrawer: false,\r\n    openSnackbar: false,\r\n    snackbarMessage: \"\",\r\n    selectedKey: gettingStartedKey,\r\n\r\n    localIP: null,\r\n    localDevices: [],\r\n    remoteDevices: [],\r\n    knownDevice: \"192.168.0.15\",\r\n\r\n    scanDevices: false,\r\n    isLocalScan: false,\r\n    isRemoteScan: false,\r\n    scanCompleted: 0,\r\n    scanTotal: 0\r\n  };\r\n\r\n  toggleDrawer = open => () => {\r\n    this.setState({ openDrawer: open });\r\n  };\r\n\r\n  handleSnackbarClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    this.setState({ openSnackbar: false });\r\n  };\r\n\r\n  handleListItemClick = (event, key) => {\r\n    this.setState({ selectedKey: key });\r\n  };\r\n\r\n  handleLocalClick = () => {\r\n    this.findDevices(true);\r\n  };\r\n\r\n  handleRemoteClick = () => {\r\n    this.findDevices(false);\r\n  };\r\n\r\n  handleAddKnownDevice = ip => {\r\n    this.setState({ knownDevice: ip });\r\n    this.scanKnownDevice(ip);\r\n  };\r\n\r\n  async scanKnownDevice(ip) {\r\n    await this.loadAboutAsync(ip);\r\n  }\r\n\r\n  async findDevices(isLocal) {\r\n    try {\r\n      const message = isLocal\r\n        ? \"Scanning local devices...\"\r\n        : \"Scanning remote devices...\";\r\n      this.setState({ openSnackbar: true, snackbarMessage: message });\r\n      if (!isLocal && !this.state.localIP) {\r\n        await this.getLocalIPAddressAsync();\r\n      }\r\n      const baseIP = isLocal ? \"169.254.17.1\" : this.state.localIP;\r\n      const scanDevices = getFullRange(baseIP);\r\n      this.setState({\r\n        isLocalScan: isLocal,\r\n        isRemoteScan: !isLocal,\r\n        scanCompleted: 0,\r\n        scanTotal: scanDevices.length\r\n      });\r\n      scanDevices.map(async ip => {\r\n        await this.loadAboutAsync(ip);\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  async getLocalIPAddressAsync() {\r\n    try {\r\n      const ip = await getLocalIPAddress();\r\n      if (ip) {\r\n        const knownDevice =\r\n          ip\r\n            .split(\".\")\r\n            .slice(0, 3)\r\n            .join(\".\") + \".15\";\r\n        this.setState({\r\n          localIP: ip,\r\n          knownDevice: knownDevice\r\n        });\r\n      }\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  async loadAboutAsync(ip) {\r\n    // ip should be a valid IP address.\r\n    const isLocal = ip.split(\".\").slice(0, 1) === \"169\";\r\n    const devices = isLocal ? \"localDevices\" : \"remoteDevices\";\r\n    try {\r\n      const aboutURL = \"http://\" + ip + \"/about\";\r\n      const aboutRequest = new Request(aboutURL);\r\n      const aboutFetch = await fetch(aboutRequest);\r\n      const aboutJson = await aboutFetch.json();\r\n      if (aboutJson) {\r\n        if (!isZiveDevice(aboutJson.macAddress)) return;\r\n        const validDevice = {\r\n          name: aboutJson.model,\r\n          serialNumber: aboutJson.serialNumber,\r\n          ipAddress: aboutJson.ipAddress,\r\n          macAddress: aboutJson.macAddress,\r\n          about: aboutJson\r\n        };\r\n        if (\r\n          this.state[devices].filter(device => device.ipAddress === ip)\r\n            .length <= 0\r\n        ) {\r\n          this.setState({\r\n            [devices]: [...this.state[devices], validDevice]\r\n          });\r\n        }\r\n      }\r\n    } catch (e) {\r\n      const invalidDevice = this.state[devices].filter(\r\n        device => device.ipAddress === ip\r\n      );\r\n      this.setState({\r\n        [devices]: this.state[devices].filter(function(device) {\r\n          return device !== invalidDevice;\r\n        })\r\n      });\r\n    } finally {\r\n      this.setState({ scanCompleted: this.state.scanCompleted + 1 });\r\n    }\r\n  }\r\n\r\n  ScanProgress(disabled = false, value = 0) {\r\n    if (disabled) {\r\n      return <React.Fragment />;\r\n    } else {\r\n      return (\r\n        <React.Fragment>\r\n          <LinearProgress\r\n            variant=\"determinate\"\r\n            value={value}\r\n            color=\"secondary\"\r\n          />\r\n        </React.Fragment>\r\n      );\r\n    }\r\n  }\r\n\r\n  ListDevices(devices) {\r\n    const linkTo = ip => \"/device/\" + ip;\r\n    const deviceLink = ip => props => <Link to={linkTo(ip)} {...props} />;\r\n    const listKey = ip => {\r\n      return \"nav-ip-\" + ip.split(\".\").join(\"-\");\r\n    };\r\n    const dividerKey = ip => {\r\n      return \"nav-divider-\" + ip.split(\".\").join(\"-\");\r\n    };\r\n    if (devices) {\r\n      return devices.map(device => (\r\n        <React.Fragment>\r\n          <Divider variant=\"inset\" key={dividerKey(device.ipAddress)} />\r\n          <ListItem\r\n            button\r\n            dense\r\n            key={listKey(device.ipAddress)}\r\n            component={deviceLink(device.ipAddress)}\r\n            selected={this.state.selectedKey === device.ipAddress}\r\n            onClick={event => this.handleListItemClick(event, device.ipAddress)}\r\n          >\r\n            <ListItemIcon>\r\n              <TabletIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary={device.name} secondary={device.ipAddress} />\r\n          </ListItem>\r\n        </React.Fragment>\r\n      ));\r\n    } else {\r\n      return <React.Fragment />;\r\n    }\r\n  }\r\n\r\n  getAbout(ip) {\r\n    if (!ip) return null;\r\n    const isLocal = ip.split(\".\").slice(0, 1) === \"169\";\r\n    const devices = isLocal ? \"localDevices\" : \"remoteDevices\";\r\n    const matchedDevice = this.state[devices].find(function(device) {\r\n      return device.ipAddress === ip;\r\n    });\r\n    return matchedDevice.about;\r\n  }\r\n\r\n  GettingStartedTitle = () => (\r\n    <Typography variant=\"h6\" color=\"inherit\" noWrap>\r\n      Zive Channels\r\n    </Typography>\r\n  );\r\n\r\n  ChannelTitle = ({ match: { params } }) => {\r\n    const about = this.getAbout(params.id);\r\n    const model = about.model.startsWith(\"Zive\")\r\n      ? about.model\r\n          .split(\" \")\r\n          .slice(1)\r\n          .join(\" \")\r\n      : about.model;\r\n    const ip = about.ipAddress;\r\n    return (\r\n      <Typography variant=\"h6\" color=\"inherit\" noWrap>\r\n        {model} ({ip}) - Zive Channels\r\n      </Typography>\r\n    );\r\n  };\r\n\r\n  channelPage = ({ match: { params } }) => {\r\n    return (\r\n      <React.Fragment>\r\n        <ChannelPage ipAddress={params.id} />\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  gettingStartedLink = props => <Link to=\"/\" {...props} />;\r\n\r\n  componentDidMount = () => {\r\n    this.getLocalIPAddressAsync();\r\n  };\r\n\r\n  render() {\r\n    const { classes, theme } = this.props;\r\n    const { openDrawer, openSnackbar, snackbarMessage } = this.state;\r\n    const { localIP, localDevices, remoteDevices } = this.state;\r\n    const { isLocalScan, isRemoteScan, scanCompleted, scanTotal } = this.state;\r\n\r\n    // progress in scanning\r\n    const isScanning = scanTotal > 0 && scanCompleted < scanTotal;\r\n    const isLocalScanning = isLocalScan && isScanning;\r\n    const isRemoteScanning = isRemoteScan && isScanning;\r\n    const completed = isScanning ? (scanCompleted * 100) / scanTotal : 0;\r\n    return (\r\n      <Router>\r\n        <div className={classes.root}>\r\n          <CssBaseline />\r\n          <AppBar\r\n            position=\"fixed\"\r\n            className={classNames(classes.appBar, {\r\n              [classes.appBarShift]: openDrawer\r\n            })}\r\n          >\r\n            <Toolbar disableGutters={!openDrawer}>\r\n              <IconButton\r\n                color=\"inherit\"\r\n                aria-label=\"Open drawer\"\r\n                onClick={this.toggleDrawer(true)}\r\n                className={classNames(\r\n                  classes.menuButton,\r\n                  openDrawer && classes.hide\r\n                )}\r\n              >\r\n                <MenuIcon />\r\n              </IconButton>\r\n              <Switch>\r\n                <Route path=\"/\" exact component={this.GettingStartedTitle} />\r\n                <Route path=\"/device/:id\" exact component={this.ChannelTitle} />\r\n              </Switch>\r\n            </Toolbar>\r\n          </AppBar>\r\n          <Drawer\r\n            className={classes.drawer}\r\n            variant=\"persistent\"\r\n            anchor=\"left\"\r\n            open={openDrawer}\r\n            classes={{\r\n              paper: classes.drawerPaper\r\n            }}\r\n          >\r\n            <div className={classes.drawerHeader}>\r\n              <IconButton onClick={this.toggleDrawer(false)}>\r\n                {theme.direction === \"ltr\" ? (\r\n                  <ChevronLeftIcon />\r\n                ) : (\r\n                  <ChevronRightIcon />\r\n                )}\r\n              </IconButton>\r\n            </div>\r\n            <Divider key=\"nav-first-divider\" />\r\n            <ListItem\r\n              button\r\n              dense\r\n              key={gettingStartedKey}\r\n              component={this.gettingStartedLink}\r\n              selected={this.state.selectedKey === gettingStartedKey}\r\n              onClick={event =>\r\n                this.handleListItemClick(event, gettingStartedKey)\r\n              }\r\n            >\r\n              <ListItemText primary=\"Getting Started\" />\r\n            </ListItem>\r\n            <Divider key=\"nav-second-divider\" />\r\n            <Tooltip\r\n              title=\"Click to scan local devices\"\r\n              aria-label=\"Click to scan local devices\"\r\n            >\r\n              <ListItem\r\n                button\r\n                dense\r\n                key=\"nav-local-devices\"\r\n                onClick={this.handleLocalClick}\r\n                disabled={isScanning}\r\n              >\r\n                <ListItemIcon>\r\n                  <DeviceHubIcon />\r\n                </ListItemIcon>\r\n                <ListItemText\r\n                  primary=\"Scan My Devices\"\r\n                  secondary={\r\n                    isLocalScanning\r\n                      ? \"scanning... \" + scanCompleted + \"/\" + scanTotal\r\n                      : localDevices.length\r\n                      ? \"\"\r\n                      : \"no devices found\"\r\n                  }\r\n                />\r\n              </ListItem>\r\n            </Tooltip>\r\n            {this.ScanProgress(!isLocalScanning, completed)}\r\n            {this.ListDevices(localDevices)}\r\n            <Divider key=\"nav-third-divider\" />\r\n            <Tooltip\r\n              title=\"Click to scan remote devices\"\r\n              aria-label=\"Click to scan remote devices\"\r\n            >\r\n              <ListItem\r\n                button\r\n                dense\r\n                key=\"nav-remote-devices\"\r\n                onClick={this.handleRemoteClick}\r\n                disabled={isScanning}\r\n              >\r\n                <ListItemIcon>\r\n                  <DeviceHubIcon />\r\n                </ListItemIcon>\r\n                <ListItemText\r\n                  primary=\"Scan Remote Devices\"\r\n                  secondary={\r\n                    isRemoteScanning\r\n                      ? \"scanning... \" + scanCompleted + \"/\" + scanTotal\r\n                      : remoteDevices.length\r\n                      ? localIP\r\n                      : \"no devices found\"\r\n                  }\r\n                />\r\n              </ListItem>\r\n            </Tooltip>\r\n            {this.ScanProgress(!isRemoteScanning, completed)}\r\n            {this.ListDevices(remoteDevices)}\r\n            <Divider key=\"nav-last-divider\" />\r\n            <FabAddDevice\r\n              classes={classes}\r\n              knownDevice={this.state.knownDevice}\r\n              onClick={this.handleAddKnownDevice}\r\n            />\r\n          </Drawer>\r\n          <main\r\n            className={classNames(classes.content, {\r\n              [classes.contentShift]: openDrawer\r\n            })}\r\n          >\r\n            <div className={classes.drawerHeader} />\r\n            <Switch>\r\n              <Route path=\"/\" exact component={GettingStartedPage} />\r\n              <Route path=\"/device/:id\" exact component={this.channelPage} />\r\n            </Switch>\r\n          </main>\r\n          <Snackbar\r\n            anchorOrigin={{\r\n              vertical: \"bottom\",\r\n              horizontal: \"left\"\r\n            }}\r\n            open={openSnackbar}\r\n            autoHideDuration={2000}\r\n            onClose={this.handleSnackbarClose}\r\n            ContentProps={{\r\n              \"aria-describedby\": \"message-id\"\r\n            }}\r\n            message={<span id=\"message-id\">{snackbarMessage}</span>}\r\n            action={[\r\n              <IconButton\r\n                key=\"close\"\r\n                aria-label=\"Close\"\r\n                color=\"inherit\"\r\n                className={classes.close}\r\n                onClick={this.handleSnackbarClose}\r\n              >\r\n                <CloseIcon />\r\n              </IconButton>\r\n            ]}\r\n          />\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nIndex.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  theme: PropTypes.object.isRequired\r\n};\r\n\r\nexport default withRoot(withStyles(styles, { withTheme: true })(Index));\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Index from \"./pages/index\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<Index />, document.querySelector(\"#root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}