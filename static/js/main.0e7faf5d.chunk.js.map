{"version":3,"sources":["withRoot.js","utilities/utilities.js","pages/index.js","serviceWorker.js","index.js"],"names":["theme","createMuiTheme","palette","primary","light","purple","main","dark","secondary","green","typography","useNextVariants","withRoot","Component","props","react_default","a","createElement","core_styles","CssBaseline_default","addresses","ZiveLab","getFullRange","ip","includeEndpoints","arguments","length","undefined","ipaddress","test","alert","validateIPaddress","ipStart","substr","lastIndexOf","Array","from","el","i","isZiveDevice","mac","type","leading","toLowerCase","split","slice","join","indexOf","JSON","stringify","vendor","macLookup","gettingStartedKey","Index","state","openDrawer","openSnackbar","snackbarMessage","selectedKey","localIP","localDevices","remoteDevices","scanDevices","isLocalScan","isRemoteScan","scanCompleted","scanTotal","toggleDrawer","open","_this","setState","handleSnackbarClose","event","reason","handleListItemClick","key","handleLocalClick","findDevices","handleRemoteClick","GettingStartedHome","GettingStartedTitle","Typography_default","variant","color","noWrap","DeviceTitle","_ref","params","match","id","DeviceHome","_ref2","about","getAbout","Fragment","main_default","src","displayDataTypes","model","description","frequencyRanges","voltageRanges","currentRanges","temperatureSensor","macAddress","ipAddress","subnetMask","router","port","sifBoard","sifFirmware","sifSerialNumber","zimBoard","zimFirmware","zimSerialNumber","gettingStartedLink","react_router_dom","Object","assign","to","isLocal","message","this","getLocalIPAddressAsync","baseIP","map","_ref3","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","_this2","loadAboutAsync","stop","_x2","apply","console","log","_context2","t0","Promise","resolve","reject","RTCPeerConnection","window","webkitRTCPeerConnection","mozRTCPeerConnection","rtc","iceServers","createDataChannel","reliable","onicecandidate","evt","candidate","addr","sdp","finalIP","forEach","line","parts","grepSDP","createOffer","offerDesc","setLocalDescription","e","warn","_context3","devices","aboutRequest","Request","fetch","aboutFetch","json","aboutJson","MacAddress","validDevice","name","Model","serialNumber","SerialNumber","IPAddress","filter","device","defineProperty","concat","toConsumableArray","invalidDevice","disabled","value","LinearProgress_default","_this3","linkTo","Divider_default","ListItem_default","button","component","selected","onClick","ListItemIcon_default","Tablet_default","ListItemText_default","find","_this4","_this$props","classes","_this$state","_this$state2","_this$state3","isScanning","isLocalScanning","isRemoteScanning","completed","className","root","AppBar_default","position","classNames","appBar","appBarShift","Toolbar_default","disableGutters","IconButton_default","aria-label","menuButton","hide","Menu_default","react_router","path","exact","Drawer_default","drawer","anchor","paper","drawerPaper","drawerHeader","direction","ChevronLeft_default","ChevronRight_default","Tooltip_default","title","DeviceHub_default","ScanProgress","ListDevices","content","contentShift","Snackbar_default","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","ContentProps","aria-describedby","action","close","Close_default","React","withStyles","display","transition","transitions","create","easing","sharp","duration","leavingScreen","width","marginLeft","easeOut","enteringScreen","badgeMargin","margin","spacing","unit","marginRight","flexShrink","objectSpread","alignItems","padding","mixins","toolbar","justifyContent","flexGrow","withTheme","Boolean","location","hostname","ReactDOM","render","pages","document","querySelector","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mVAQMA,EAAQC,yBAAe,CAC3BC,QAAS,CACPC,QAAS,CACPC,MAAOC,IAAO,KACdC,KAAMD,IAAO,KACbE,KAAMF,IAAO,MAEfG,UAAW,CACTJ,MAAOK,IAAM,KACbH,KAAMG,IAAM,KACZF,KAAME,IAAM,OAGhBC,WAAY,CACVC,iBAAiB,KAoBNC,MAhBf,SAAkBC,GAahB,OAZA,SAAkBC,GAGhB,OACEC,EAAAC,EAAAC,cAACC,EAAA,iBAAD,CAAmBlB,MAAOA,GAExBe,EAAAC,EAAAC,cAACE,EAAAH,EAAD,MACAD,EAAAC,EAAAC,cAACJ,EAAcC,yXCjCjBM,GAAY,CAChBC,QAAS,CACP,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,mBA8EJ,SAASC,GAAaC,GAA8B,IAA1BC,EAA0BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAClD,IAYF,SAA2BG,GACzB,GACE,mKAAmKC,KACjKD,GAGF,OAAO,EAGT,OADAE,MAAM,4CACC,EArBFC,CAAkBR,GAAK,OAAO,KAEnC,IAAIS,EAAUT,EAAGU,OAAO,EAAGV,EAAGW,YAAY,KAAO,GACjD,OAAOV,EACHW,MAAMC,KAAK,CAAEV,OAAQ,KAAO,SAACW,EAAIC,GAAL,OAAWN,GAAWM,EAAI,KACtDH,MAAMC,KAAK,CAAEV,OAAQ,KAAO,SAACW,EAAIC,GAAL,OAAWN,GAAWM,EAAI,KA2C5D,SAASC,GAAaC,GACpB,MAAqC,YAnBvC,SAAmBA,EAAKC,GACtB,IAAMC,EAAUF,EACbG,cACAC,MAAM,KACNC,MAAM,EAAG,GACTC,KAAK,KAER,GAAIL,GAAQrB,GAAUqB,IAChBrB,GAAUqB,GAAMM,QAAQL,IAAY,EAAG,OAAOD,EAGpD,IAAoD,IAAhDO,KAAKC,UAAU7B,IAAW2B,QAAQL,GAAiB,OAAO,EAE9D,IAAK,IAAIQ,KAAU9B,GACjB,GAAIA,GAAU8B,GAAQH,QAAQL,IAAY,EAAG,OAAOQ,EAK/CC,CAAUX,EAAK,WC9GxB,IA8DMY,GAAoB,sBAEpBC,8MACJC,MAAQ,CACNC,YAAY,EACZC,cAAc,EACdC,gBAAiB,GACjBC,YAAaN,GAEbO,QAAS,KACTC,aAAc,GACdC,cAAe,GAEfC,aAAa,EACbC,aAAa,EACbC,cAAc,EACdC,cAAe,EACfC,UAAW,KAGbC,aAAe,SAAAC,GAAI,OAAI,WACrBC,EAAKC,SAAS,CAAEf,WAAYa,QAG9BG,oBAAsB,SAACC,EAAOC,GACb,cAAXA,GAGJJ,EAAKC,SAAS,CAAEd,cAAc,OAGhCkB,oBAAsB,SAACF,EAAOG,GAC5BN,EAAKC,SAAS,CAAEZ,YAAaiB,OAG/BC,iBAAmB,WACjBP,EAAKQ,aAAY,MAGnBC,kBAAoB,WAClBT,EAAKQ,aAAY,MAsInBE,mBAAqB,kBAAMhE,EAAAC,EAAAC,cAAA,gCAC3B+D,oBAAsB,kBACpBjE,EAAAC,EAAAC,cAACgE,GAAAjE,EAAD,CAAYkE,QAAQ,KAAKC,MAAM,UAAUC,QAAM,GAA/C,8BAKFC,YAAc,SAAAC,GAAA,IAAYC,EAAZD,EAAGE,MAASD,OAAZ,OACZxE,EAAAC,EAAAC,cAACgE,GAAAjE,EAAD,CAAYkE,QAAQ,KAAKC,MAAM,UAAUC,QAAM,GAA/C,aACaG,EAAOE,OAGtBC,WAAa,SAAAC,GAA2B,IAAfJ,EAAeI,EAAxBH,MAASD,OACjBK,EAAQvB,EAAKwB,SAASN,EAAOE,IAoBnC,OACE1E,EAAAC,EAAAC,cAACF,EAAAC,EAAM8E,SAAP,KACE/E,EAAAC,EAAAC,cAAA,uBAAesE,EAAOE,GAAtB,0BACA1E,EAAAC,EAAAC,cAAC8E,GAAA/E,EAAD,CAAWgF,IAAKJ,EAAOK,kBAAkB,IACzClF,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAC8E,GAAA/E,EAAD,CAAWgF,IAxBE,CACfE,MAAO,eACPC,YAAa,kBACbC,gBAAiB,gBACjBC,cAAe,aACfC,cAAe,yBACfC,kBAAmB,SACnBC,WAAY,oBACZC,UAAW,cACXC,WAAY,gBACZC,OAAQ,cACRC,KAAM,IACNC,SAAU,UACVC,YAAa,UACbC,gBAAiB,cACjBC,SAAU,UACVC,YAAa,UACbC,gBAAiB,eAOWjB,kBAAkB,QAKlDkB,mBAAqB,SAAArG,GAAK,OAAIC,EAAAC,EAAAC,cAACmG,EAAA,EAADC,OAAAC,OAAA,CAAMC,GAAG,KAAQzG,wHA9K7B0G,gGAERC,EAAUD,EACZ,4BACA,6BACJE,KAAKpD,SAAS,CAAEd,cAAc,EAAMC,gBAAiBgE,IAChDD,GAAYE,KAAKpE,MAAMK,wCACpB+D,KAAKC,gCAEPC,EAASJ,EAAU,eAAiBE,KAAKpE,MAAMK,QAC/CG,EAAcxC,GAAasG,GACjCF,KAAKpD,SAAS,CACZP,YAAayD,EACbxD,cAAewD,EACfvD,cAAe,EACfC,UAAWJ,EAAYpC,SAEzBoC,EAAY+D,IAAZ,eAAAC,EAAAT,OAAAU,EAAA,EAAAV,CAAAW,EAAAhH,EAAAiH,KAAgB,SAAAC,EAAM3G,GAAN,OAAAyG,EAAAhH,EAAAmH,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACRC,EAAKC,eAAejH,GADZ,wBAAA6G,EAAAK,SAAAP,MAAhB,gBAAAQ,GAAA,OAAAZ,EAAAa,MAAAjB,KAAAjG,YAAA,sDAIAmH,QAAQC,IAARC,EAAAC,ySDjIG,IAAIC,QAAQ,SAASC,EAASC,GAEnC,IAAIC,EAC8BC,OAAOC,yBACvCD,OAAOE,qBAEJH,GACHD,EAAO,0CAGT,IAAIK,EAAM,IAAIJ,EAAkB,CAAEK,WAAY,KA2B5CD,EAAIE,kBAAkB,GAAI,CAAEC,UAAU,IAGxCH,EAAII,eAAiB,SAASC,GAG5B,GAAIA,EAAIC,UAAW,CACjB,IAAIC,EAhCR,SAAiBC,GAEf,IAAIC,EAAU,GAkBd,OAjBAD,EAAInH,MAAM,QAAQqH,QAAQ,SAASC,GAEjC,IAAKA,EAAKnH,QAAQ,eAAgB,CAEhC,IAAMoH,EAAQD,EAAKtH,MAAM,KACnBkH,EAAOK,EAAM,GAEN,SADAA,EAAM,KAEjBH,EAAUF,QAEP,IAAKI,EAAKnH,QAAQ,MAAO,CAE9B,IACM+G,EADQI,EAAKtH,MAAM,KACN,GACnBoH,EAAUF,KAGPE,EAYMI,CAAQ,KAAOR,EAAIC,UAAUA,WACxCZ,EAAQa,KAGZP,EAAIc,YACF,SAASC,GACPf,EAAIgB,oBAAoBD,IAE1B,SAASE,GACP5B,QAAQ6B,KAAK,eAAgBD,eCkFzBjJ,WAEJmG,KAAKpD,SAAS,CACZX,QAASpC,oDAIbqH,QAAQC,IAAR6B,EAAA3B,8LAIiBxH,4FAEbiG,EAAwC,QAA9BjG,EAAGqB,MAAM,KAAKC,MAAM,EAAG,GACjC8H,EAAUnD,EAAU,eAAiB,yBAGnCoD,EAAe,IAAIC,QADR,UAAYtJ,EAAK,mBAETuJ,MAAMF,iBAAzBG,mBACkBA,EAAWC,oBAA7BC,8BAEC1I,GAAa0I,EAAUC,+DACtBC,EAAc,CAClBC,KAAMH,EAAUI,OAASJ,EAAU/E,MACnCoF,aAAcL,EAAUM,cAAgBN,EAAUK,aAClD7E,UAAWwE,EAAUO,WAAaP,EAAUxE,UAC5CD,WAAYyE,EAAUC,YAAcD,EAAUzE,WAC9CZ,MAAOqF,GAGPvD,KAAKpE,MAAMqH,GAASc,OAAO,SAAAC,GAAM,OAAIA,EAAOjF,YAAclF,IACvDG,QAAU,GAEbgG,KAAKpD,SAAL+C,OAAAsE,EAAA,EAAAtE,CAAA,GACGsD,EADH,GAAAiB,OAAAvE,OAAAwE,EAAA,EAAAxE,CACiBK,KAAKpE,MAAMqH,IAD5B,CACsCQ,gEAKpCW,EAAgBpE,KAAKpE,MAAMqH,GAASc,OACxC,SAAAC,GAAM,OAAIA,EAAOjF,YAAclF,IAEjCmG,KAAKpD,SAAL+C,OAAAsE,EAAA,EAAAtE,CAAA,GACGsD,EAAUjD,KAAKpE,MAAMqH,GAASc,OAAO,SAASC,GAC7C,OAAOA,IAAWI,+BAItBpE,KAAKpD,SAAS,CAAEL,cAAeyD,KAAKpE,MAAMW,cAAgB,2KAIpB,IAA7B8H,EAA6BtK,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAAXuK,EAAWvK,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAH,EACrC,OAAIsK,EACKhL,EAAAC,EAAAC,cAACF,EAAAC,EAAM8E,SAAP,MAGL/E,EAAAC,EAAAC,cAACF,EAAAC,EAAM8E,SAAP,KACE/E,EAAAC,EAAAC,cAACgL,EAAAjL,EAAD,CACEkE,QAAQ,cACR8G,MAAOA,EACP7G,MAAM,mDAOJwF,GAAS,IAAAuB,EAAAxE,KACbyE,EAAS,SAAA5K,GAAE,MAAI,WAAaA,GAElC,OAAIoJ,EACKA,EAAQ9C,IAAI,SAAA6D,GAAM,OACvB3K,EAAAC,EAAAC,cAACF,EAAAC,EAAM8E,SAAP,KACE/E,EAAAC,EAAAC,cAACmL,EAAApL,EAAD,MACAD,EAAAC,EAAAC,cAACoL,EAAArL,EAAD,CACEsL,QAAM,EACN3H,IAAK+G,EAAOjF,UACZ8F,WARWhL,EAQWmK,EAAOjF,UARZ,SAAA3F,GAAK,OAAIC,EAAAC,EAAAC,cAACmG,EAAA,EAADC,OAAAC,OAAA,CAAMC,GAAI4E,EAAO5K,IAAST,MASpD0L,SAAUN,EAAK5I,MAAMI,cAAgBgI,EAAOjF,UAC5CgG,QAAS,SAAAjI,GAAK,OAAI0H,EAAKxH,oBAAoBF,EAAOkH,EAAOjF,aAEzD1F,EAAAC,EAAAC,cAACyL,EAAA1L,EAAD,KACED,EAAAC,EAAAC,cAAC0L,GAAA3L,EAAD,OAEFD,EAAAC,EAAAC,cAAC2L,EAAA5L,EAAD,CAAcb,QAASuL,EAAON,KAAM5K,UAAWkL,EAAOjF,cAf3C,IAAAlF,IAoBVR,EAAAC,EAAAC,cAACF,EAAAC,EAAM8E,SAAP,uCAIFvE,GACP,IAAKA,EAAI,OAAO,KAChB,IACMoJ,EADwC,QAA9BpJ,EAAGqB,MAAM,KAAKC,MAAM,EAAG,GACb,eAAiB,gBAI3C,OAHsB6E,KAAKpE,MAAMqH,GAASkC,KAAK,SAASnB,GACtD,OAAOA,EAAOjF,YAAclF,IAETqE,uCAgDd,IAAAkH,EAAApF,KAAAqF,EACoBrF,KAAK5G,MAAxBkM,EADDD,EACCC,QAAShN,EADV+M,EACU/M,MADViN,EAE+CvF,KAAKpE,MAAnDC,EAFD0J,EAEC1J,WAAYC,EAFbyJ,EAEazJ,aAAcC,EAF3BwJ,EAE2BxJ,gBAF3ByJ,EAG0CxF,KAAKpE,MAA9CK,EAHDuJ,EAGCvJ,QAASC,EAHVsJ,EAGUtJ,aAAcC,EAHxBqJ,EAGwBrJ,cAHxBsJ,EAIyDzF,KAAKpE,MAA7DS,EAJDoJ,EAICpJ,YAAaC,EAJdmJ,EAIcnJ,aAAcC,EAJ5BkJ,EAI4BlJ,cAAeC,EAJ3CiJ,EAI2CjJ,UAG5CkJ,EAAalJ,EAAY,GAAKD,EAAgBC,EAC9CmJ,EAAkBtJ,GAAeqJ,EACjCE,EAAmBtJ,GAAgBoJ,EACnCG,EAAYH,EAA8B,IAAhBnJ,EAAuBC,EAAY,EACnE,OACEnD,EAAAC,EAAAC,cAACmG,EAAA,EAAD,KACErG,EAAAC,EAAAC,cAAA,OAAKuM,UAAWR,EAAQS,MACtB1M,EAAAC,EAAAC,cAACE,EAAAH,EAAD,MACAD,EAAAC,EAAAC,cAACyM,EAAA1M,EAAD,CACE2M,SAAS,QACTH,UAAWI,IAAWZ,EAAQa,OAATxG,OAAAsE,EAAA,EAAAtE,CAAA,GAClB2F,EAAQc,YAAcvK,KAGzBxC,EAAAC,EAAAC,cAAC8M,EAAA/M,EAAD,CAASgN,gBAAiBzK,GACxBxC,EAAAC,EAAAC,cAACgN,EAAAjN,EAAD,CACEmE,MAAM,UACN+I,aAAW,cACXzB,QAAS/E,KAAKvD,cAAa,GAC3BqJ,UAAWI,IACTZ,EAAQmB,WACR5K,GAAcyJ,EAAQoB,OAGxBrN,EAAAC,EAAAC,cAACoN,GAAArN,EAAD,OAEFD,EAAAC,EAAAC,cAACqN,EAAA,EAAD,KACEvN,EAAAC,EAAAC,cAACqN,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACjC,UAAW7E,KAAK1C,sBACtCjE,EAAAC,EAAAC,cAACqN,EAAA,EAAD,CAAOC,KAAK,cAAcC,OAAK,EAACjC,UAAW7E,KAAKrC,iBAItDtE,EAAAC,EAAAC,cAACwN,EAAAzN,EAAD,CACEwM,UAAWR,EAAQ0B,OACnBxJ,QAAQ,aACRyJ,OAAO,OACPvK,KAAMb,EACNyJ,QAAS,CACP4B,MAAO5B,EAAQ6B,cAGjB9N,EAAAC,EAAAC,cAAA,OAAKuM,UAAWR,EAAQ8B,cACtB/N,EAAAC,EAAAC,cAACgN,EAAAjN,EAAD,CAAYyL,QAAS/E,KAAKvD,cAAa,IAChB,QAApBnE,EAAM+O,UACLhO,EAAAC,EAAAC,cAAC+N,GAAAhO,EAAD,MAEAD,EAAAC,EAAAC,cAACgO,GAAAjO,EAAD,QAIND,EAAAC,EAAAC,cAACmL,EAAApL,EAAD,MACAD,EAAAC,EAAAC,cAACoL,EAAArL,EAAD,CACEsL,QAAM,EACN3H,IAAKvB,GACLmJ,UAAW7E,KAAKP,mBAChBqF,SAAU9E,KAAKpE,MAAMI,cAAgBN,GACrCqJ,QAAS,SAAAjI,GAAK,OACZsI,EAAKpI,oBAAoBF,EAAOpB,MAGlCrC,EAAAC,EAAAC,cAAC2L,EAAA5L,EAAD,CAAcb,QAAQ,qBAExBY,EAAAC,EAAAC,cAACmL,EAAApL,EAAD,MACAD,EAAAC,EAAAC,cAACiO,EAAAlO,EAAD,CACEmO,MAAM,8BACNjB,aAAW,+BAEXnN,EAAAC,EAAAC,cAACoL,EAAArL,EAAD,CACEsL,QAAM,EACN3H,IAAI,oBACJ8H,QAAS/E,KAAK9C,iBACdmH,SAAUqB,GAEVrM,EAAAC,EAAAC,cAACyL,EAAA1L,EAAD,KACED,EAAAC,EAAAC,cAACmO,GAAApO,EAAD,OAEFD,EAAAC,EAAAC,cAAC2L,EAAA5L,EAAD,CACEb,QAAQ,aACRK,UACE6M,EACI,eAAiBpJ,EAAgB,IAAMC,EACvCN,EAAalC,OACb,GACA,uBAKXgG,KAAK2H,cAAchC,EAAiBE,GACpC7F,KAAK4H,YAAY1L,GAClB7C,EAAAC,EAAAC,cAACmL,EAAApL,EAAD,MACAD,EAAAC,EAAAC,cAACiO,EAAAlO,EAAD,CACEmO,MAAM,+BACNjB,aAAW,gCAEXnN,EAAAC,EAAAC,cAACoL,EAAArL,EAAD,CACEsL,QAAM,EACN3H,IAAI,qBACJ8H,QAAS/E,KAAK5C,kBACdiH,SAAUqB,GAEVrM,EAAAC,EAAAC,cAACyL,EAAA1L,EAAD,KACED,EAAAC,EAAAC,cAACmO,GAAApO,EAAD,OAEFD,EAAAC,EAAAC,cAAC2L,EAAA5L,EAAD,CACEb,QAAQ,iBACRK,UACE8M,EACI,eAAiBrJ,EAAgB,IAAMC,EACvCL,EAAcnC,OACdiC,EACA,uBAKX+D,KAAK2H,cAAc/B,EAAkBC,GACrC7F,KAAK4H,YAAYzL,GAClB9C,EAAAC,EAAAC,cAACmL,EAAApL,EAAD,OAEFD,EAAAC,EAAAC,cAAA,QACEuM,UAAWI,IAAWZ,EAAQuC,QAATlI,OAAAsE,EAAA,EAAAtE,CAAA,GAClB2F,EAAQwC,aAAejM,KAG1BxC,EAAAC,EAAAC,cAAA,OAAKuM,UAAWR,EAAQ8B,eACxB/N,EAAAC,EAAAC,cAACqN,EAAA,EAAD,KACEvN,EAAAC,EAAAC,cAACqN,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACjC,UAAW7E,KAAK3C,qBACtChE,EAAAC,EAAAC,cAACqN,EAAA,EAAD,CAAOC,KAAK,cAAcC,OAAK,EAACjC,UAAW7E,KAAKhC,eAGpD3E,EAAAC,EAAAC,cAACwO,EAAAzO,EAAD,CACE0O,aAAc,CACZC,SAAU,SACVC,WAAY,QAEdxL,KAAMZ,EACNqM,iBAAkB,IAClBC,QAASpI,KAAKnD,oBACdwL,aAAc,CACZC,mBAAoB,cAEtBvI,QAAS1G,EAAAC,EAAAC,cAAA,QAAMwE,GAAG,cAAchC,GAChCwM,OAAQ,CACNlP,EAAAC,EAAAC,cAACgN,EAAAjN,EAAD,CACE2D,IAAI,QACJuJ,aAAW,QACX/I,MAAM,UACNqI,UAAWR,EAAQkD,MACnBzD,QAAS/E,KAAKnD,qBAEdxD,EAAAC,EAAAC,cAACkP,GAAAnP,EAAD,mBAvXIoP,IAAMvP,WAsYXD,KAASyP,qBApcT,SAAArQ,GAAK,MAAK,CACvByN,KAAM,CACJ6C,QAAS,QAEXzC,OAAQ,CACN0C,WAAYvQ,EAAMwQ,YAAYC,OAAO,CAAC,SAAU,SAAU,CACxDC,OAAQ1Q,EAAMwQ,YAAYE,OAAOC,MACjCC,SAAU5Q,EAAMwQ,YAAYI,SAASC,iBAGzC/C,YAAa,CACXgD,MAAK,eAAAlF,OAbW,IAaX,OACLmF,WAdgB,IAehBR,WAAYvQ,EAAMwQ,YAAYC,OAAO,CAAC,SAAU,SAAU,CACxDC,OAAQ1Q,EAAMwQ,YAAYE,OAAOM,QACjCJ,SAAU5Q,EAAMwQ,YAAYI,SAASK,kBAGzCC,YAAa,CACXC,OAA6B,EAArBnR,EAAMoR,QAAQC,MAExBlD,WAAY,CACV4C,WAAY,GACZO,YAAa,IAEflD,KAAM,CACJkC,QAAS,QAEX5B,OAAQ,CACNoC,MA/BgB,IAgChBS,WAAY,GAEd1C,YAAa,CACXiC,MAnCgB,KAqClBhC,aAAazH,OAAAmK,EAAA,EAAAnK,CAAA,CACXiJ,QAAS,OACTmB,WAAY,SACZC,QAAS,SACN1R,EAAM2R,OAAOC,QAJN,CAKVC,eAAgB,aAElBtC,QAAS,CACPuC,SAAU,EACVJ,QAA8B,EAArB1R,EAAMoR,QAAQC,KACvBd,WAAYvQ,EAAMwQ,YAAYC,OAAO,SAAU,CAC7CC,OAAQ1Q,EAAMwQ,YAAYE,OAAOC,MACjCC,SAAU5Q,EAAMwQ,YAAYI,SAASC,gBAEvCE,YAnDgB,KAqDlBvB,aAAc,CACZe,WAAYvQ,EAAMwQ,YAAYC,OAAO,SAAU,CAC7CC,OAAQ1Q,EAAMwQ,YAAYE,OAAOM,QACjCJ,SAAU5Q,EAAMwQ,YAAYI,SAASK,iBAEvCF,WAAY,KA4Y2B,CAAEgB,WAAW,GAAhC1B,CAAwChN,KC9d5C2O,QACW,cAA7B5I,OAAO6I,SAASC,UAEe,UAA7B9I,OAAO6I,SAASC,UAEhB9I,OAAO6I,SAASC,SAAS1M,MAAM,2DCZnC2M,IAASC,OAAOrR,EAAAC,EAAAC,cAACoR,GAAD,MAAWC,SAASC,cAAc,UDwH5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0e7faf5d.chunk.js","sourcesContent":["import React from 'react';\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\nimport purple from '@material-ui/core/colors/purple';\r\nimport green from '@material-ui/core/colors/green';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\n// A theme with custom primary and secondary color.\r\n// It's optional.\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      light: purple[300],\r\n      main: purple[500],\r\n      dark: purple[700],\r\n    },\r\n    secondary: {\r\n      light: green[300],\r\n      main: green[500],\r\n      dark: green[700],\r\n    },\r\n  },\r\n  typography: {\r\n    useNextVariants: true,\r\n  },\r\n});\r\n\r\nfunction withRoot(Component) {\r\n  function WithRoot(props) {\r\n    // ThemeProvider makes the theme available down the React tree\r\n    // thanks to React context.\r\n    return (\r\n      <MuiThemeProvider  theme={theme}>\r\n        {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\r\n        <CssBaseline />\r\n        <Component {...props} />\r\n      </MuiThemeProvider>\r\n    );\r\n  }\r\n\r\n  return WithRoot;\r\n}\r\n\r\nexport default withRoot;\r\n","// 0x001BC5081000 to 0x001BC5081FFF\r\nconst addresses = {\r\n  ZiveLab: [\r\n    \"00:1b:c5:08:10\",\r\n    \"00:1b:c5:08:11\",\r\n    \"00:1b:c5:08:12\",\r\n    \"00:1b:c5:08:13\",\r\n    \"00:1b:c5:08:14\",\r\n    \"00:1b:c5:08:15\",\r\n    \"00:1b:c5:08:16\",\r\n    \"00:1b:c5:08:17\",\r\n    \"00:1b:c5:08:18\",\r\n    \"00:1b:c5:08:19\",\r\n    \"00:1b:c5:08:1a\",\r\n    \"00:1b:c5:08:1b\",\r\n    \"00:1b:c5:08:1c\",\r\n    \"00:1b:c5:08:1d\",\r\n    \"00:1b:c5:08:1e\",\r\n    \"00:1b:c5:08:1f\"\r\n  ]\r\n};\r\n\r\n// https://gist.github.com/hectorguo/672844c319547498dcb569df583f959d\r\n/**\r\n * Get Local IP Address\r\n *\r\n * @returns Promise Object\r\n *\r\n * getLocalIPAddress().then((ipAddr) => {\r\n *    console.log(ipAddr); // 192.168.0.122\r\n * });\r\n */\r\nfunction getLocalIPAddress() {\r\n  return new Promise(function(resolve, reject) {\r\n    // NOTE: window.RTCPeerConnection is \"not a constructor\" in FF22/23\r\n    var RTCPeerConnection =\r\n      /*window.RTCPeerConnection ||*/ window.webkitRTCPeerConnection ||\r\n      window.mozRTCPeerConnection;\r\n\r\n    if (!RTCPeerConnection) {\r\n      reject(\"Your browser does not support this API\");\r\n    }\r\n\r\n    var rtc = new RTCPeerConnection({ iceServers: [] });\r\n\r\n    function grepSDP(sdp) {\r\n      //var hosts = [];\r\n      var finalIP = \"\";\r\n      sdp.split(\"\\r\\n\").forEach(function(line) {\r\n        // c.f. http://tools.ietf.org/html/rfc4566#page-39\r\n        if (~line.indexOf(\"a=candidate\")) {\r\n          // http://tools.ietf.org/html/rfc4566#section-5.13\r\n          const parts = line.split(\" \"); // http://tools.ietf.org/html/rfc5245#section-15.1\r\n          const addr = parts[4];\r\n          const type = parts[7];\r\n          if (type === \"host\") {\r\n            finalIP = addr;\r\n          }\r\n        } else if (~line.indexOf(\"c=\")) {\r\n          // http://tools.ietf.org/html/rfc4566#section-5.7\r\n          const parts = line.split(\" \");\r\n          const addr = parts[2];\r\n          finalIP = addr;\r\n        }\r\n      });\r\n      return finalIP;\r\n    }\r\n\r\n    if (1 || window.mozRTCPeerConnection) {\r\n      // FF [and now Chrome!] needs a channel/stream to proceed\r\n      rtc.createDataChannel(\"\", { reliable: false });\r\n    }\r\n\r\n    rtc.onicecandidate = function(evt) {\r\n      // convert the candidate to SDP so we can run it through our general parser\r\n      // see https://twitter.com/lancestout/status/525796175425720320 for details\r\n      if (evt.candidate) {\r\n        var addr = grepSDP(\"a=\" + evt.candidate.candidate);\r\n        resolve(addr);\r\n      }\r\n    };\r\n    rtc.createOffer(\r\n      function(offerDesc) {\r\n        rtc.setLocalDescription(offerDesc);\r\n      },\r\n      function(e) {\r\n        console.warn(\"offer failed\", e);\r\n      }\r\n    );\r\n  });\r\n}\r\n\r\n/**\r\n * Build array of full ip range (xxx.xxx.x.1-255) given example ip address\r\n * @param {String} ip\r\n */\r\nfunction getFullRange(ip, includeEndpoints = false) {\r\n  if (!validateIPaddress(ip)) return null;\r\n\r\n  var ipStart = ip.substr(0, ip.lastIndexOf(\".\") + 1);\r\n  return includeEndpoints\r\n    ? Array.from({ length: 255 }, (el, i) => ipStart + (i + 1))\r\n    : Array.from({ length: 253 }, (el, i) => ipStart + (i + 2));\r\n}\r\n\r\n/**\r\n * Check if the given ip address is valid\r\n * @param {String} ip\r\n */\r\nfunction validateIPaddress(ipaddress) {\r\n  if (\r\n    /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(\r\n      ipaddress\r\n    )\r\n  ) {\r\n    return true;\r\n  }\r\n  alert(\"You have entered an invalid IP address!\");\r\n  return false;\r\n}\r\n\r\n/**\r\n * Cross references provided mac address with lookup table (incomplete)\r\n * @param {string} mac\r\n * @param {string} type\r\n * @return {string}\r\n */\r\nfunction macLookup(mac, type) {\r\n  const leading = mac\r\n    .toLowerCase()\r\n    .split(\":\")\r\n    .slice(0, 5)\r\n    .join(\":\");\r\n\r\n  if (type && addresses[type]) {\r\n    if (addresses[type].indexOf(leading) > -1) return type;\r\n  }\r\n\r\n  if (JSON.stringify(addresses).indexOf(leading) === -1) return false;\r\n\r\n  for (var vendor in addresses) {\r\n    if (addresses[vendor].indexOf(leading) > -1) return vendor;\r\n  }\r\n}\r\n\r\nfunction isZiveDevice(mac) {\r\n  return macLookup(mac, \"ZiveLab\") === \"ZiveLab\";\r\n}\r\n\r\nexport {\r\n  getLocalIPAddress,\r\n  getFullRange,\r\n  validateIPaddress,\r\n  macLookup,\r\n  isZiveDevice\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport classNames from \"classnames\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport withRoot from \"../withRoot\";\r\nimport { HashRouter as Router, Route, Link, Switch } from \"react-router-dom\";\r\n\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport ReactJson from \"react-json-view\";\r\n\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport DeviceHubIcon from \"@material-ui/icons/DeviceHub\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport TabletIcon from \"@material-ui/icons/Tablet\";\r\n\r\nimport {\r\n  getLocalIPAddress,\r\n  getFullRange,\r\n  isZiveDevice\r\n} from \"../utilities/utilities.js\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    display: \"flex\"\r\n  },\r\n  appBar: {\r\n    transition: theme.transitions.create([\"margin\", \"width\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen\r\n    })\r\n  },\r\n  appBarShift: {\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    marginLeft: drawerWidth,\r\n    transition: theme.transitions.create([\"margin\", \"width\"], {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen\r\n    })\r\n  },\r\n  badgeMargin: {\r\n    margin: theme.spacing.unit * 2\r\n  },\r\n  menuButton: {\r\n    marginLeft: 12,\r\n    marginRight: 20\r\n  },\r\n  hide: {\r\n    display: \"none\"\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth\r\n  },\r\n  drawerHeader: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    padding: \"0 8px\",\r\n    ...theme.mixins.toolbar,\r\n    justifyContent: \"flex-end\"\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing.unit * 3,\r\n    transition: theme.transitions.create(\"margin\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen\r\n    }),\r\n    marginLeft: -drawerWidth\r\n  },\r\n  contentShift: {\r\n    transition: theme.transitions.create(\"margin\", {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen\r\n    }),\r\n    marginLeft: 0\r\n  }\r\n});\r\n\r\nconst gettingStartedKey = \"getting-started-nav\";\r\n\r\nclass Index extends React.Component {\r\n  state = {\r\n    openDrawer: false,\r\n    openSnackbar: false,\r\n    snackbarMessage: \"\",\r\n    selectedKey: gettingStartedKey,\r\n\r\n    localIP: null,\r\n    localDevices: [],\r\n    remoteDevices: [],\r\n\r\n    scanDevices: false,\r\n    isLocalScan: false,\r\n    isRemoteScan: false,\r\n    scanCompleted: 0,\r\n    scanTotal: 0\r\n  };\r\n\r\n  toggleDrawer = open => () => {\r\n    this.setState({ openDrawer: open });\r\n  };\r\n\r\n  handleSnackbarClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    this.setState({ openSnackbar: false });\r\n  };\r\n\r\n  handleListItemClick = (event, key) => {\r\n    this.setState({ selectedKey: key });\r\n  };\r\n\r\n  handleLocalClick = () => {\r\n    this.findDevices(true);\r\n  };\r\n\r\n  handleRemoteClick = () => {\r\n    this.findDevices(false);\r\n  };\r\n\r\n  async findDevices(isLocal) {\r\n    try {\r\n      const message = isLocal\r\n        ? \"Scanning local devices...\"\r\n        : \"Scanning remote devices...\";\r\n      this.setState({ openSnackbar: true, snackbarMessage: message });\r\n      if (!isLocal && !this.state.localIP) {\r\n        await this.getLocalIPAddressAsync();\r\n      }\r\n      const baseIP = isLocal ? \"169.254.17.1\" : this.state.localIP;\r\n      const scanDevices = getFullRange(baseIP);\r\n      this.setState({\r\n        isLocalScan: isLocal,\r\n        isRemoteScan: !isLocal,\r\n        scanCompleted: 0,\r\n        scanTotal: scanDevices.length\r\n      });\r\n      scanDevices.map(async ip => {\r\n        await this.loadAboutAsync(ip);\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  async getLocalIPAddressAsync() {\r\n    try {\r\n      const ip = await getLocalIPAddress();\r\n      if (ip) {\r\n        this.setState({\r\n          localIP: ip\r\n        });\r\n      }\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  async loadAboutAsync(ip) {\r\n    // ip should be a valid IP address.\r\n    const isLocal = ip.split(\".\").slice(0, 1) === \"169\";\r\n    const devices = isLocal ? \"localDevices\" : \"remoteDevices\";\r\n    try {\r\n      const aboutURL = \"http://\" + ip + \"/about\";\r\n      const aboutRequest = new Request(aboutURL);\r\n      const aboutFetch = await fetch(aboutRequest);\r\n      const aboutJson = await aboutFetch.json();\r\n      if (aboutJson) {\r\n        if (!isZiveDevice(aboutJson.MacAddress)) return;\r\n        const validDevice = {\r\n          name: aboutJson.Model || aboutJson.model,\r\n          serialNumber: aboutJson.SerialNumber || aboutJson.serialNumber,\r\n          ipAddress: aboutJson.IPAddress || aboutJson.ipAddress,\r\n          macAddress: aboutJson.MacAddress || aboutJson.macAddress,\r\n          about: aboutJson\r\n        };\r\n        if (\r\n          this.state[devices].filter(device => device.ipAddress === ip)\r\n            .length <= 0\r\n        ) {\r\n          this.setState({\r\n            [devices]: [...this.state[devices], validDevice]\r\n          });\r\n        }\r\n      }\r\n    } catch (e) {\r\n      const invalidDevice = this.state[devices].filter(\r\n        device => device.ipAddress === ip\r\n      );\r\n      this.setState({\r\n        [devices]: this.state[devices].filter(function(device) {\r\n          return device !== invalidDevice;\r\n        })\r\n      });\r\n    } finally {\r\n      this.setState({ scanCompleted: this.state.scanCompleted + 1 });\r\n    }\r\n  }\r\n\r\n  ScanProgress(disabled = false, value = 0) {\r\n    if (disabled) {\r\n      return <React.Fragment />;\r\n    } else {\r\n      return (\r\n        <React.Fragment>\r\n          <LinearProgress\r\n            variant=\"determinate\"\r\n            value={value}\r\n            color=\"secondary\"\r\n          />\r\n        </React.Fragment>\r\n      );\r\n    }\r\n  }\r\n\r\n  ListDevices(devices) {\r\n    const linkTo = ip => \"/device/\" + ip;\r\n    const deviceLink = ip => props => <Link to={linkTo(ip)} {...props} />;\r\n    if (devices) {\r\n      return devices.map(device => (\r\n        <React.Fragment>\r\n          <Divider />\r\n          <ListItem\r\n            button\r\n            key={device.ipAddress}\r\n            component={deviceLink(device.ipAddress)}\r\n            selected={this.state.selectedKey === device.ipAddress}\r\n            onClick={event => this.handleListItemClick(event, device.ipAddress)}\r\n          >\r\n            <ListItemIcon>\r\n              <TabletIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary={device.name} secondary={device.ipAddress} />\r\n          </ListItem>\r\n        </React.Fragment>\r\n      ));\r\n    } else {\r\n      return <React.Fragment />;\r\n    }\r\n  }\r\n\r\n  getAbout(ip) {\r\n    if (!ip) return null;\r\n    const isLocal = ip.split(\".\").slice(0, 1) === \"169\";\r\n    const devices = isLocal ? \"localDevices\" : \"remoteDevices\";\r\n    const matchedDevice = this.state[devices].find(function(device) {\r\n      return device.ipAddress === ip;\r\n    });\r\n    return matchedDevice.about;\r\n  }\r\n\r\n  GettingStartedHome = () => <h1>Getting Started</h1>;\r\n  GettingStartedTitle = () => (\r\n    <Typography variant=\"h6\" color=\"inherit\" noWrap>\r\n      ZiveLab Channels v0.1.0\r\n    </Typography>\r\n  );\r\n\r\n  DeviceTitle = ({ match: { params } }) => (\r\n    <Typography variant=\"h6\" color=\"inherit\" noWrap>\r\n      Device at {params.id}\r\n    </Typography>\r\n  );\r\n  DeviceHome = ({ match: { params } }) => {\r\n    const about = this.getAbout(params.id);\r\n    const aboutRef = {\r\n      model: \"Zive ZIM-SIF\",\r\n      description: \"Impedance Meter\",\r\n      frequencyRanges: \"4kHz to 0.1Hz\",\r\n      voltageRanges: \"1000V/100V\",\r\n      currentRanges: \"2A/400mA/200mA...400uA\",\r\n      temperatureSensor: \"PT1000\",\r\n      macAddress: \"00:1B:C5:08:11:00\",\r\n      ipAddress: \"192.168.0.6\",\r\n      subnetMask: \"255.255.255.0\",\r\n      router: \"192.168.0.1\",\r\n      port: 2000,\r\n      sifBoard: \"1.0.0.0\",\r\n      sifFirmware: \"1.0.1.1\",\r\n      sifSerialNumber: \"IF19030001A\",\r\n      zimBoard: \"1.1.0.0\",\r\n      zimFirmware: \"0.0.1.0\",\r\n      zimSerialNumber: \"IM19030001A\"\r\n    };\r\n    return (\r\n      <React.Fragment>\r\n        <h1>Device at {params.id} will be rendered here</h1>\r\n        <ReactJson src={about} displayDataTypes={false} />\r\n        <h3>ref</h3>\r\n        <ReactJson src={aboutRef} displayDataTypes={false} />\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  gettingStartedLink = props => <Link to=\"/\" {...props} />;\r\n\r\n  render() {\r\n    const { classes, theme } = this.props;\r\n    const { openDrawer, openSnackbar, snackbarMessage } = this.state;\r\n    const { localIP, localDevices, remoteDevices } = this.state;\r\n    const { isLocalScan, isRemoteScan, scanCompleted, scanTotal } = this.state;\r\n\r\n    // progress in scanning\r\n    const isScanning = scanTotal > 0 && scanCompleted < scanTotal;\r\n    const isLocalScanning = isLocalScan && isScanning;\r\n    const isRemoteScanning = isRemoteScan && isScanning;\r\n    const completed = isScanning ? (scanCompleted * 100) / scanTotal : 0;\r\n    return (\r\n      <Router>\r\n        <div className={classes.root}>\r\n          <CssBaseline />\r\n          <AppBar\r\n            position=\"fixed\"\r\n            className={classNames(classes.appBar, {\r\n              [classes.appBarShift]: openDrawer\r\n            })}\r\n          >\r\n            <Toolbar disableGutters={!openDrawer}>\r\n              <IconButton\r\n                color=\"inherit\"\r\n                aria-label=\"Open drawer\"\r\n                onClick={this.toggleDrawer(true)}\r\n                className={classNames(\r\n                  classes.menuButton,\r\n                  openDrawer && classes.hide\r\n                )}\r\n              >\r\n                <MenuIcon />\r\n              </IconButton>\r\n              <Switch>\r\n                <Route path=\"/\" exact component={this.GettingStartedTitle} />\r\n                <Route path=\"/device/:id\" exact component={this.DeviceTitle} />\r\n              </Switch>\r\n            </Toolbar>\r\n          </AppBar>\r\n          <Drawer\r\n            className={classes.drawer}\r\n            variant=\"persistent\"\r\n            anchor=\"left\"\r\n            open={openDrawer}\r\n            classes={{\r\n              paper: classes.drawerPaper\r\n            }}\r\n          >\r\n            <div className={classes.drawerHeader}>\r\n              <IconButton onClick={this.toggleDrawer(false)}>\r\n                {theme.direction === \"ltr\" ? (\r\n                  <ChevronLeftIcon />\r\n                ) : (\r\n                  <ChevronRightIcon />\r\n                )}\r\n              </IconButton>\r\n            </div>\r\n            <Divider />\r\n            <ListItem\r\n              button\r\n              key={gettingStartedKey}\r\n              component={this.gettingStartedLink}\r\n              selected={this.state.selectedKey === gettingStartedKey}\r\n              onClick={event =>\r\n                this.handleListItemClick(event, gettingStartedKey)\r\n              }\r\n            >\r\n              <ListItemText primary=\"Getting Started\" />\r\n            </ListItem>\r\n            <Divider />\r\n            <Tooltip\r\n              title=\"Click to scan local devices\"\r\n              aria-label=\"Click to scan local devices\"\r\n            >\r\n              <ListItem\r\n                button\r\n                key=\"local-devices-nav\"\r\n                onClick={this.handleLocalClick}\r\n                disabled={isScanning}\r\n              >\r\n                <ListItemIcon>\r\n                  <DeviceHubIcon />\r\n                </ListItemIcon>\r\n                <ListItemText\r\n                  primary=\"My Devices\"\r\n                  secondary={\r\n                    isLocalScanning\r\n                      ? \"scanning... \" + scanCompleted + \"/\" + scanTotal\r\n                      : localDevices.length\r\n                      ? \"\"\r\n                      : \"no devices found\"\r\n                  }\r\n                />\r\n              </ListItem>\r\n            </Tooltip>\r\n            {this.ScanProgress(!isLocalScanning, completed)}\r\n            {this.ListDevices(localDevices)}\r\n            <Divider />\r\n            <Tooltip\r\n              title=\"Click to scan remote devices\"\r\n              aria-label=\"Click to scan remote devices\"\r\n            >\r\n              <ListItem\r\n                button\r\n                key=\"remote-devices-nav\"\r\n                onClick={this.handleRemoteClick}\r\n                disabled={isScanning}\r\n              >\r\n                <ListItemIcon>\r\n                  <DeviceHubIcon />\r\n                </ListItemIcon>\r\n                <ListItemText\r\n                  primary=\"Remote Devices\"\r\n                  secondary={\r\n                    isRemoteScanning\r\n                      ? \"scanning... \" + scanCompleted + \"/\" + scanTotal\r\n                      : remoteDevices.length\r\n                      ? localIP\r\n                      : \"no devices found\"\r\n                  }\r\n                />\r\n              </ListItem>\r\n            </Tooltip>\r\n            {this.ScanProgress(!isRemoteScanning, completed)}\r\n            {this.ListDevices(remoteDevices)}\r\n            <Divider />\r\n          </Drawer>\r\n          <main\r\n            className={classNames(classes.content, {\r\n              [classes.contentShift]: openDrawer\r\n            })}\r\n          >\r\n            <div className={classes.drawerHeader} />\r\n            <Switch>\r\n              <Route path=\"/\" exact component={this.GettingStartedHome} />\r\n              <Route path=\"/device/:id\" exact component={this.DeviceHome} />\r\n            </Switch>\r\n          </main>\r\n          <Snackbar\r\n            anchorOrigin={{\r\n              vertical: \"bottom\",\r\n              horizontal: \"left\"\r\n            }}\r\n            open={openSnackbar}\r\n            autoHideDuration={2000}\r\n            onClose={this.handleSnackbarClose}\r\n            ContentProps={{\r\n              \"aria-describedby\": \"message-id\"\r\n            }}\r\n            message={<span id=\"message-id\">{snackbarMessage}</span>}\r\n            action={[\r\n              <IconButton\r\n                key=\"close\"\r\n                aria-label=\"Close\"\r\n                color=\"inherit\"\r\n                className={classes.close}\r\n                onClick={this.handleSnackbarClose}\r\n              >\r\n                <CloseIcon />\r\n              </IconButton>\r\n            ]}\r\n          />\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nIndex.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  theme: PropTypes.object.isRequired\r\n};\r\n\r\nexport default withRoot(withStyles(styles, { withTheme: true })(Index));\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Index from \"./pages/index\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<Index />, document.querySelector(\"#root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}